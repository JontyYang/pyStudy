# '00\d'可以匹配'007'，但无法匹配'00A'；
# '\d\d\d'可以匹配'010'；
# '\w\w\d'可以匹配'py3'；
# .可以匹配任意字符

# 用*表示任意个字符（包括0个），用+表示至少一个字符，
# 用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个
#
# [0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
# [0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
# [a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
# [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
# A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
# ^表示行的开头，^\d表示必须以数字开头。
# $表示行的结束，\d$表示必须以数字结束。

# Python提供re模块，包含所有正则表达式的功能。由于Python的字符串本身也用\转义，所以要特别注意
s = 'ABC\\-001' # Python的字符串
# 对应的正则表达式字符串变成：
# 'ABC\-001'

# 因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了：
s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'

import re
print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))

# 切分字符串
# 不能识别连续的空格
print('a b  c'.split(' '))
# 使用正则表达式
print(re.split(r'\s+', 'a b    c'))
print(re.split(r'[\s\,\:]+', 'a , b :: c  d'))